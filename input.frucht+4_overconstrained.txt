# Frucht graph.

# Initial vertex coords:
#  4-----3
#  |\    |\
#  | \   5-0
#  |  \ /  |
#  |   6   |
#  |   |   |
#  |   |   |
#  |   |   |
#  |  11   |
#  |  / \  |
#  2-10  9-1
#   \|   |/ 
#    8---7

1 1 0
1 -1 0
-1 -1 0
.5 1.5 0
-1 1.5 0
.5 1 .5
0 .5 1
.5 -1.5 0
-.5 -1.5 0
.5 -1 .5
-.5 -1 .5
0 -.5 1

# Edges all want to be exactly 1.
#0 1 == 1.1755705045847646  # this happens to be the resulting edge length if we relax this edge completely to get the perfectly constrained system
0 1 == 1
0 3 == 1
2 4 == 1
3 4 == 1
0 5 == 1
3 5 == 1
5 6 == 1
4 6 == 1
1 7 == 1
2 8 == 1
7 8 == 1
1 9 == 1
7 9 == 1
2 10 == 1
8 10 == 1
6 11 == 1
9 11 == 1
10 11 == 1

# (Note, the program currently treats all springs up through
# the last "== 1" as edges to be drawn)

# Square diagonals want to be exactly sqrt(2).
# But, we need only specify one of them
# (give the other one an impossible-to-violate constraint,
# just so its final length will be reported; it should be sqrt(2) as well)
4 5 == 1.4142135623730951
3 6 <= 1000

# Make both pentagons rigid.  That is, add two diagonals to each,
# having length equal to the golden ratio
# (and add impossible-to-violate constraints for the other 3 diagonals,
# so their final lengths will be reported; they should be golden ratio
# as well).
4 10 == 1.618033988749895
10 6 == 1.618033988749895
6 2 <= 1000
2 11 <= 1000
11 4 <= 1000

9 10 == 1.618033988749895
10 7 == 1.618033988749895
7 11 <= 1000
11 8 <= 1000
8 9 <= 1000

